{
  "hash": "f291c1ece3cc2ee75114aadcb9281d89",
  "result": {
    "markdown": "---\ntitle: \"Experimentos completamente aleatorizados\"\nauthor: [\"Miguel Equihua\", \"Alan Aguirre\"]\ndate: \"2023-01-30\"\ndraft: false\nlang: es\ncategories: [clase]\nformat:\n  html:\n    code-fold: true\n---\n\n\n![](ma%C3%ADz.jpg){width=\"400\"}\n\n# Diseño completamente aleatorizado\n\n## Respuesta de Cultivares a fertilizantes (GLEX1)\n\nEjemplo tomado de Crawley (1998). **Glim for Ecologists**. Oxford. UK.\n\nEs un experimento en el que se midió el crecimiento (masa seca al cosechar = *y*) de plantas tratadas con 10 concentraciones diferentes de suplemento mineral como fertilizante, *f*. El experimento fue realizado con dos cultivares diferentes, *g*. Uno fue clonado de plantas de un ambiente árido y el otro de uno húmedo. Todas las plantas de cada tipo, sin restricciones, fueron asignadas aleatoriamente a los distintos niveles de fertilizante.\n\nleer lista de archivos en un directorio\n\n### Lectura de datos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGLEX1 <- read.table(\"GLEX1.DAT\",\n                    col.names=c(\"fertilizante\", \"rendimiento_peso\")) \n\nhead(GLEX1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  fertilizante rendimiento_peso\n1            1           2.8215\n2            2           2.3590\n3            3           3.0912\n4            4           2.5297\n5            5           3.4753\n6            6           3.6493\n```\n:::\n:::\n\n\nA veces hay archivos que contienen datos faltantes o perdidos. Podemos enfrentar eso con la función `complete.cases()` que revisa linea por linea el archivo y regresa \"verdadero\" si todas las columnas tienen datos válidos y \"falso\". Esta lista de \"verdaderos\" y \"falsos\" la podemos usar para elegir que filas del archivo de datos están completas y así podemos eliminarlas del conjunto de datos que vamos a procesar.\n\nSobre los datos limpios, generamos la variable indicativa del tipo de ambiente del que se tomo la planta que se clonó.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# En caso de que haya datos extra, elimino registros leidos como datos erróneos\nGLEX1 <- GLEX1[complete.cases(GLEX1), ]\n```\n:::\n\n\n### Genera los factores genotipo y fertilizante\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGLEX1$cultivar <- factor(rep(c(\"seco\",\"humedo\"), each=10))\nGLEX1$fertilizante <- factor(GLEX1$fertilizante) \n\nhead(GLEX1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  fertilizante rendimiento_peso cultivar\n1            1           2.8215     seco\n2            2           2.3590     seco\n3            3           3.0912     seco\n4            4           2.5297     seco\n5            5           3.4753     seco\n6            6           3.6493     seco\n```\n:::\n:::\n\n\n### gráfica de masa seca contra fertilizante mineral - sin diferenciar tratamientos\n\nVeamos los datos en una gráfica simple. La función plot hace cosas distintas según el tipo de datos que le demos. Para generar la gráfica simple que queremos aquí, conviene que los valores de fertilizante sean interpretados como valores numéricos. Esto lo logramos con la funnción `as.numeric`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(as.numeric(GLEX1$fertilizante), GLEX1$rendimiento_peso, xlab=\"fertilizante\", ylab=\"biomasa\", type=\"p\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nPara explorar mejor los datos podemos marcar en la gráfica las obsevaciones que pertenecen a cada condición. En este caso, te propongo poner el nobre que le dimos al \"tratamiento\".\n\nGráfica de masa seca contra fertilizante mineral diferenciando por genotipos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(as.numeric(GLEX1$fertilizante), \n     GLEX1$rendimiento_peso, xlab=\"fertilizante\", ylab=\"biomasa\", type=\"n\")\ntext (GLEX1$fertilizante, GLEX1$rendimiento_peso, labels=GLEX1$cultivar)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nPodemos calcular ver las características estadísticas de lo que pasa con la biomasa que produce cada genotipo\n\n### Resumen de los datos de masa por genotipo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nby (GLEX1, GLEX1$cultivar, summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGLEX1$cultivar: humedo\n  fertilizante rendimiento_peso   cultivar \n 1      :1     Min.   : 4.405   humedo:10  \n 2      :1     1st Qu.: 5.617   seco  : 0  \n 3      :1     Median : 8.592              \n 4      :1     Mean   : 8.716              \n 5      :1     3rd Qu.:10.977              \n 6      :1     Max.   :14.502              \n (Other):4                                 \n------------------------------------------------------------ \nGLEX1$cultivar: seco\n  fertilizante rendimiento_peso   cultivar \n 1      :1     Min.   : 2.359   humedo: 0  \n 2      :1     1st Qu.: 2.889   seco  :10  \n 3      :1     Median : 3.562              \n 4      :1     Mean   : 4.866              \n 5      :1     3rd Qu.: 6.355              \n 6      :1     Max.   :10.130              \n (Other):4                                 \n```\n:::\n:::\n\n\nAhora podemos realizar el análisis estadístico mediante modelos. Hagamos ahora un análisis con el enfoque \"tradicional\" en **R**. Lo primero que haremos es configurar el entorno de análisis, esto significa elegir el tipo de contrastes que queremos operar al ajustar modelos *reparametrizados*. Haremos esto con opción *contrasts* en la función `options(contrasts=...)`\n\nPara asegurarnos de que los estimadores del modelo toman el primer nivel como referencia hay que usar el modo de reparametrización \"treatment\". Hay otras formas de reparametrización, como podrás ver en la ayuda de `contr.treatment`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(contrasts=c(\"contr.treatment\", \"contr.poly\"))\n```\n:::\n\n\n### ajusta modelo nulo - sólo la media\n\n\n::: {.cell}\n\n```{.r .cell-code}\naj1 <- lm (rendimiento_peso ~ 1, data = GLEX1)\nsummary(aj1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = rendimiento_peso ~ 1, data = GLEX1)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-4.432 -3.185 -1.006  2.555  7.711 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   6.7912     0.8067   8.419 7.79e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.608 on 19 degrees of freedom\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Agregamos el efecto del fertilizante\naj2 <- update(aj1, .~ . + fertilizante)\nanova(aj2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: rendimiento_peso\n             Df Sum Sq Mean Sq F value Pr(>F)\nfertilizante  9 142.75  15.861  1.5174 0.2622\nResiduals    10 104.53  10.453               \n```\n:::\n:::\n\n\nNótese que el número de niveles de fertilizante es 10, así que los grados de libertad son 10-1=9. De modo semejante el número de observaciones es 20, así que los grados de libertad del residuo descuenta los grados de libertad del fertilizante y 1 (por la estimación de la media general): 20 - 9 - 1 = 10\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# agregamos el cultivar\naj3 <- update(aj2,  .~ . + cultivar)\nanova(aj3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: rendimiento_peso\n             Df  Sum Sq Mean Sq F value   Pr(>F)   \nfertilizante  9 142.747  15.861  4.6953 0.015392 * \ncultivar      1  74.125  74.125 21.9434 0.001145 **\nResiduals     9  30.402   3.378                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nPodemos intentar hacer un modelo completo, es decir con todos los posibles factores y combinaciones que pueden producirse. Sin embargo este modelo consume todos los grados de liberta (observacione) con que contamos. De todos modos lo podemos intentar para ver que nos dice **R**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# agregamos una pendiente diferente para cada genotipo\naj4 <- update(aj3,  .~ . + cultivar:fertilizante)\nanova(aj4)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in anova.lm(aj4): ANOVA F-tests on an essentially perfect fit are\nunreliable\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: rendimiento_peso\n                      Df  Sum Sq Mean Sq F value Pr(>F)\nfertilizante           9 142.747  15.861     NaN    NaN\ncultivar               1  74.125  74.125     NaN    NaN\nfertilizante:cultivar  9  30.402   3.378     NaN    NaN\nResiduals              0   0.000     NaN               \n```\n:::\n:::\n\n\nLa scuencia de ajustes produce estos cambios en devianza\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(aj1, aj2, aj3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nModel 1: rendimiento_peso ~ 1\nModel 2: rendimiento_peso ~ fertilizante\nModel 3: rendimiento_peso ~ fertilizante + cultivar\n  Res.Df     RSS Df Sum of Sq       F   Pr(>F)   \n1     19 247.274                                 \n2     10 104.527  9   142.747  4.6953 0.015392 * \n3      9  30.402  1    74.125 21.9434 0.001145 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\n### Modelo mínimo adecuado\n\nestos resultados sugieren que el modelo 3 es mínimo adecuado resumen del modelo mínimo adecuado\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(aj3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = rendimiento_peso ~ fertilizante + cultivar, data = GLEX1)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.6653 -0.7855  0.0000  0.7855  2.6653 \n\nCoefficients:\n               Estimate Std. Error t value Pr(>|t|)   \n(Intercept)      5.9538     1.3630   4.368  0.00180 **\nfertilizante2   -0.1251     1.8379  -0.068  0.94720   \nfertilizante3    0.5784     1.8379   0.315  0.76014   \nfertilizante4   -0.5614     1.8379  -0.305  0.76695   \nfertilizante5    3.1205     1.8379   1.698  0.12376   \nfertilizante6    2.3383     1.8379   1.272  0.23518   \nfertilizante7    3.3713     1.8379   1.834  0.09981 . \nfertilizante8    5.7776     1.8379   3.144  0.01186 * \nfertilizante9    5.8829     1.8379   3.201  0.01082 * \nfertilizante10   7.2434     1.8379   3.941  0.00340 **\ncultivarseco    -3.8503     0.8219  -4.684  0.00115 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.838 on 9 degrees of freedom\nMultiple R-squared:  0.8771,\tAdjusted R-squared:  0.7404 \nF-statistic:  6.42 on 10 and 9 DF,  p-value: 0.004992\n```\n:::\n:::\n\n\nPara comprender con exactitud que es lo que hace exactamente **R** al ajustar un modelo de regresión o ANDEVA, como este podemos usar la función `model.matrix()` aplicada al modelo que nos interese analizar. En este caso lo ejemplificaré con el modelo mínimo adecuado aj3. Así podemos ver en acción el uso de las formas de reparametrización\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel.matrix(aj3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   (Intercept) fertilizante2 fertilizante3 fertilizante4 fertilizante5\n1            1             0             0             0             0\n2            1             1             0             0             0\n3            1             0             1             0             0\n4            1             0             0             1             0\n5            1             0             0             0             1\n6            1             0             0             0             0\n7            1             0             0             0             0\n8            1             0             0             0             0\n9            1             0             0             0             0\n10           1             0             0             0             0\n11           1             0             0             0             0\n12           1             1             0             0             0\n13           1             0             1             0             0\n14           1             0             0             1             0\n15           1             0             0             0             1\n16           1             0             0             0             0\n17           1             0             0             0             0\n18           1             0             0             0             0\n19           1             0             0             0             0\n20           1             0             0             0             0\n   fertilizante6 fertilizante7 fertilizante8 fertilizante9 fertilizante10\n1              0             0             0             0              0\n2              0             0             0             0              0\n3              0             0             0             0              0\n4              0             0             0             0              0\n5              0             0             0             0              0\n6              1             0             0             0              0\n7              0             1             0             0              0\n8              0             0             1             0              0\n9              0             0             0             1              0\n10             0             0             0             0              1\n11             0             0             0             0              0\n12             0             0             0             0              0\n13             0             0             0             0              0\n14             0             0             0             0              0\n15             0             0             0             0              0\n16             1             0             0             0              0\n17             0             1             0             0              0\n18             0             0             1             0              0\n19             0             0             0             1              0\n20             0             0             0             0              1\n   cultivarseco\n1             1\n2             1\n3             1\n4             1\n5             1\n6             1\n7             1\n8             1\n9             1\n10            1\n11            0\n12            0\n13            0\n14            0\n15            0\n16            0\n17            0\n18            0\n19            0\n20            0\nattr(,\"assign\")\n [1] 0 1 1 1 1 1 1 1 1 1 2\nattr(,\"contrasts\")\nattr(,\"contrasts\")$fertilizante\n[1] \"contr.treatment\"\n\nattr(,\"contrasts\")$cultivar\n[1] \"contr.treatment\"\n```\n:::\n:::\n\n\n### crítica al modelo y recursos diagnósticos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(aj3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-4.png){width=672}\n:::\n:::\n\n\n# Ejemplo Proteina y alcaloide\n\nGLEX11 (p. 138) Proteína y alcaloide. Se midió el incremento en longitud (mm) de larvas de insectos. Se hicieron mediciones después de dos semanas de alimentarlas con una dieta artificial bajo condiciones controladas de temperatura. Uno de los factores fue la cantidad de proteína en la dieta, con tres niveles (bajo, medio, alto). El otro factor es la presencia o ausencia de un alcaloide. Cada tratamiento se repitió cuatro veces. La asignación de los tratamientos a los insectos se hizo en forma aleatoria entre todos los especímenes disponibles.\n\nEn este ejemplo usaremos la biblioteca `readxl` para leer los datos directamente desde un libro de Excel. Esta biblioteca define la función `read_excel` que lee los datos y entrega una tabla. Hay que notar que esta tabla no es un `data.frame`, es una `tibble` que es una versión actual de `data.frame` y como tal tiene algunas peculiaridades para el manejo de su contenido.\n\n## Lectura ded datos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.0 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nGLEX11 <- read_excel(\"GLEX11.xlsx\",\n    col_types = c(\"numeric\", \"numeric\", \"numeric\"),\n    col_names = TRUE)\n```\n:::\n\n\n## Definnición de los factores\n\nLos datos contienen información cualitativa, así que necesitamos definir esas piezas de información como factores. Aprovecharemos para experimentar con los factores de tipo \"ordenado\". Esta variante de factor aprovecha el contenido *seminumérico* que pudiéramos tener en alguna variable. En este caso lo haremos así para el contenido de proteína.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Uso la función \"ordered\" que genera factores ordenados, \n# útil para aprovechar datos \"semicuantitativos\" y probar polinomios\n\n# Enfoque antiguo con data.frame\n#GLEX11$proteina <- ordered(GLEX11$proteina, c(1,2,3), \n#                           c(\"bajo\", \"medio\", \"alto\"))\n#\n#GLEX11$alcaloide <-factor(GLEX11$alcaloide, c(1,2), c(\"ausente\", \"presente\"))\n#\n\n# Enfoque actual con tibble\nGLEX11 <- GLEX11 %>% mutate(proteina = ordered(proteina, c(1,2,3), \n                                     c(\"bajo\", \"medio\", \"alto\")),\n                  alcaloide = factor(alcaloide, c(1,2), \n                                      c(\"ausente\", \"presente\")))\n```\n:::\n\n\n## exploración de medias\n\nSiempre es conveniente hacer una revisión previa de los datos y considerar los patrones que apreciamos en ellos como fuente de ideas o simplemente para verificar que no haya errores de algún tipo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#\n# Enfoque antiguo con data.frame\n# Para simplificar el acceso a los datos uso la función attach\n#attach(GLEX11)\n#aggregate(list(talla=talla), list(proteina=proteina), mean)\n#aggregate(list(talla=talla), list(alcaloide=alcaloide),mean)\n#tapply(talla, list(proteina, alcaloide), mean)\n\n# Con un tibble es más práctico hacer esto\nGLEX11 %>% group_by(proteina) %>%\n           summarize(promedio = mean(talla, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  proteina promedio\n  <ord>       <dbl>\n1 bajo         5.5 \n2 medio        5.25\n3 alto         4.25\n```\n:::\n\n```{.r .cell-code}\nGLEX11 %>% group_by(alcaloide) %>%\n           summarize(promedio = mean(talla, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  alcaloide promedio\n  <fct>        <dbl>\n1 ausente        4.5\n2 presente       5.5\n```\n:::\n\n```{.r .cell-code}\n# Genero una table resumen de promedios. \n# GLEX11.res<-aggregate(list(talla=GLEX11$talla), \n#                      list(proteina=GLEX11$proteina,\n#                           alcaloide=GLEX11$alcaloide), mean)\n\nGLEX11 %>% group_by(proteina, alcaloide) %>%\n           summarize(promedio = mean(talla, na.rm=TRUE)) %>%\n           pivot_wider(names_from = proteina, values_from = promedio)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'proteina'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  alcaloide  bajo medio  alto\n  <fct>     <dbl> <dbl> <dbl>\n1 ausente     4.5   3.5   5.5\n2 presente    6.5   7     3  \n```\n:::\n:::\n\n\n## Exploración de varianzas\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#aggregate(list(talla=GLEX11$talla),\n#          list(proteina=GLEX11$proteina),var) \nGLEX11 %>% group_by(proteina) %>%\n           summarize(var = var(talla, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  proteina   var\n  <ord>    <dbl>\n1 bajo      2.57\n2 medio     4.5 \n3 alto      3.36\n```\n:::\n\n```{.r .cell-code}\n#aggregate(list(talla=GLEX11$talla), \n#          list(alcaloide=GLEX11$alcaloide), var) \nGLEX11 %>% group_by(alcaloide) %>%\n           summarize(var = var(talla, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  alcaloide   var\n  <fct>     <dbl>\n1 ausente    2.09\n2 presente   4.64\n```\n:::\n\n```{.r .cell-code}\n# tapply(GLEX11$talla, list(GLEX11$proteina, GLEX11$alcaloide), var)\nGLEX11 %>% group_by(proteina, alcaloide) %>%\n           summarize(var = var(talla, na.rm=TRUE)) %>%\n           pivot_wider(names_from = proteina, values_from = var)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'proteina'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  alcaloide  bajo medio  alto\n  <fct>     <dbl> <dbl> <dbl>\n1 ausente    1.67 1.67   1.67\n2 presente   1.67 0.667  2   \n```\n:::\n:::\n\n\n## Gráficas exploratorias\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninteraction.plot(GLEX11$proteina, GLEX11$alcaloide, GLEX11$talla) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#args(interaction.plot)\n```\n:::\n\n\n## Ajuste de modelos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlarvas.nulo <- lm(talla ~ 1, data=GLEX11)\n\n# defino una simple función que extrae devianza y df de un ajuste y lo despliga\n\n# mediante la función \"cat\"\n\ndevianza <- function(x) \n  { cat(\"devianza=\", deviance(x), \"\\ndf=\",x$df.residual,\"\\n\")}\n\n# devianza del modelo nulo\n\ndevianza(larvas.nulo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndevianza= 80 \ndf= 23 \n```\n:::\n\n```{.r .cell-code}\n# modelo completo\n\nlarvas.completo <- update(larvas.nulo, . ~ . + proteina + alcaloide + proteina:alcaloide) \n\ndevianza(larvas.completo) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndevianza= 28 \ndf= 18 \n```\n:::\n\n```{.r .cell-code}\ncoefficients(larvas.completo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 (Intercept)                   proteina.L \n                   4.5000000                    0.7071068 \n                  proteina.Q            alcaloidepresente \n                   1.2247449                    1.0000000 \nproteina.L:alcaloidepresente proteina.Q:alcaloidepresente \n                  -3.1819805                   -3.0618622 \n```\n:::\n:::\n\n\n### Otra forma de escribir el modelo completo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlarvas.completo <- update(larvas.nulo, . ~ . + proteina * alcaloide) \n\ndevianza(larvas.completo) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndevianza= 28 \ndf= 18 \n```\n:::\n\n```{.r .cell-code}\ncoefficients(larvas.completo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 (Intercept)                   proteina.L \n                   4.5000000                    0.7071068 \n                  proteina.Q            alcaloidepresente \n                   1.2247449                    1.0000000 \nproteina.L:alcaloidepresente proteina.Q:alcaloidepresente \n                  -3.1819805                   -3.0618622 \n```\n:::\n:::\n\n\n### ¿Significancia de los términos?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(larvas.completo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: talla\n                   Df Sum Sq Mean Sq F value    Pr(>F)    \nproteina            2      7  3.5000  2.2500 0.1342177    \nalcaloide           1      6  6.0000  3.8571 0.0651695 .  \nproteina:alcaloide  2     39 19.5000 12.5357 0.0003888 ***\nResiduals          18     28  1.5556                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\n### Comparaciones múltiples\n\nEsto es equivalente a una búsqueda, algo exploratoria, para dar respuesta a la pregunta: **¿Son necesarios todos los niveles de los factores?**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(larvas.completo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = talla ~ proteina + alcaloide + proteina:alcaloide, \n    data = GLEX11)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-1.500 -1.000  0.000  0.625  2.000 \n\nCoefficients:\n                             Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                    4.5000     0.3600  12.499 2.61e-10 ***\nproteina.L                     0.7071     0.6236   1.134  0.27172    \nproteina.Q                     1.2247     0.6236   1.964  0.06517 .  \nalcaloidepresente              1.0000     0.5092   1.964  0.06517 .  \nproteina.L:alcaloidepresente  -3.1820     0.8819  -3.608  0.00201 ** \nproteina.Q:alcaloidepresente  -3.0619     0.8819  -3.472  0.00272 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.247 on 18 degrees of freedom\nMultiple R-squared:   0.65,\tAdjusted R-squared:  0.5528 \nF-statistic: 6.686 on 5 and 18 DF,  p-value: 0.001103\n```\n:::\n\n```{.r .cell-code}\n# Generación de un factor re-codificado: tomaré: bame = bajo y medio, alto=alto\n\n# Por supuesto hay que considerar que esta fusión tenga sentido biológico.\n\n# Así podemos recodificar el factor proteína.\n\nGLEX11$proteinaBM <- GLEX11$proteina \nlevels(GLEX11$proteinaBM) <- c(\"bame\", \"bame\", \"alto\") # cuidar el orden\n```\n:::\n\n\n#### nuevo ajuste de modelo completo con el factor proteina recodificado.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlarvas.protBM <- lm(talla ~ proteinaBM * alcaloide, data = GLEX11) \n\nsummary(larvas.protBM)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = talla ~ proteinaBM * alcaloide, data = GLEX11)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n    -2     -1      0      1      2 \n\nCoefficients:\n                               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                      4.7500     0.3781  12.562 6.03e-11 ***\nproteinaBM.L                     1.0607     0.5347   1.984   0.0612 .  \nalcaloidepresente                0.1250     0.5347   0.234   0.8175    \nproteinaBM.L:alcaloidepresente  -3.7123     0.7562  -4.909 8.47e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.235 on 20 degrees of freedom\nMultiple R-squared:  0.6188,\tAdjusted R-squared:  0.5616 \nF-statistic: 10.82 on 3 and 20 DF,  p-value: 0.000194\n```\n:::\n:::\n\n\n#### ¿qué significancia tiene este cambio en el modelo?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(larvas.protBM,larvas.completo) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nModel 1: talla ~ proteinaBM * alcaloide\nModel 2: talla ~ proteina + alcaloide + proteina:alcaloide\n  Res.Df  RSS Df Sum of Sq      F Pr(>F)\n1     20 30.5                           \n2     18 28.0  2       2.5 0.8036 0.4632\n```\n:::\n\n```{.r .cell-code}\nplot(larvas.protBM) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-4.png){width=672}\n:::\n\n```{.r .cell-code}\ntapply(GLEX11$talla, list(GLEX11$proteinaBM, GLEX11$alcaloide), mean) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     ausente presente\nbame     4.0     6.75\nalto     5.5     3.00\n```\n:::\n\n```{.r .cell-code}\nGLEX11.resBM <- aggregate(list(talla = GLEX11$talla), \n                          list(proteinaBM= GLEX11$proteinaBM, \n                               alcaloide = GLEX11$alcaloide), mean)\n\ninteraction.plot(GLEX11$proteinaBM, GLEX11$alcaloide, GLEX11$talla)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-5.png){width=672}\n:::\n:::\n\n\n## Conclusiones\n\nCon base en estos análisis ¿Cual es el modelo mínimo adecuado?. ¿cómo podemos interpretar estos resultados? ¿tienen sentido o relevancia?\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}